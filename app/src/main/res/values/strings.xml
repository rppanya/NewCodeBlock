<resources>
    <string name="app_name">CODEBLOCKS</string>
    <string name="lt_scrollview_xa_android_layout_width_quot_match_parent_quot_xa_android_layout_height_quot_wrap_content_quot_xa_android_fillviewport_quot_true_quot_xa_android_padding_quot_16dp_quot_scary_xa_xa_lt_linearlayout_xa_android_layout_width_quot_match_parent_quot_xa_android_layout_height_quot_wrap_content_quot_xa_android_orientation_quot_vertical_quot_xa_lt_scrollview"><![CDATA[<ScrollView\n android:layout_width=\"match_parent\"\n android:layout_height=\"wrap_content\"\n android:fillViewport=\"true\"\n android:padding=\"16dp\" scary>\n\n <LinearLayout\n android:layout_width=\"match_parent\"\n android:layout_height=\"wrap_content\"\n android:orientation=\"vertical\" />\n </ScrollView>]]></string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="rus_instructions">VAR : этот блок позволяет добавлять новые переменные и присваивать им значения, а также изменять значения уже существующих переменных.

Для СОЗДАНИЯ новой переменной необходимо написать в поле NAME название переменной, а в поле VALUE вписать значение переменной. Внимание! Вы можете вводить в поле VALUE числа, арифметические операции с числами (в том числе скобочные последовательности) , другие переменные созданные ранее, арифметические выражения с существующими переменными.
Для ПЕРЕОПРЕДЕЛЕНИЯ уже существующей переменной необходимо в поле NAME написать название переменной, у которой нужно изменить значение, затем в поле VALUE записать новое значение переменной. Внимание! Для переопределения вы можете вводить в поле VALUE саму переменную, если ей раньше было присвоено значение.

PRINT : этот блок позволяет выводить данные в консоль.

С помощью блока PRINT вы можете вывести значение переменной в консоль, вывести значение арифметического выражения в консоль, вывести значение арифметического выражения с использованием переменных в консоль. а также числа. Для вывода нужно ввести в поле NAME то, что необходимо вывести.

IF : блок условия.

Для использования блока IF необходимо ввести в поле CONDITION условие в формате стандартного условия с использованием знаков >,,==,>=,=,!=. При записи условия также могут быть использованы арифметические операции как с числами, так и с переменными. Внимание! При добавлении блока IF в рабочую область добавляется два блока: блок с условием и открывающей скобкой {, а также блок с закрывающей скобкой }. Для корректной работы программы и для избежания ошибок обязательно нахождение блока закрывающей скобки НИЖЕ блока с условием. Между данными блоками, то есть внутри условного оператора могут находиться любые блоки.

IF ELSE : расширение блока условия, блок иначе.

Для использования блока IF ELSE необходимо ввести в  поле CONDITION условие в формате стандартного условия с использованием знаков >,,==,>=,=,!=. При записи условия также могут быть использованы арифметические операции как с числами, так и с переменными. Внимание! При добавлении блока IF ELSE в рабочую область добавляется три блока: блок с условием и открывающей скобкой {, блок с закрывающей скобкой }, else и открывающей скобкой {,  а также блок с закрывающей скобкой }. !!!Для корректной работы программы и для избежания ошибок обязательно размещение данных блоков по уровням в том порядке, в котором они были перечислены здесь и были добавлены в рабочую область. Между блоками IF и ELSE могут находиться любые блоки, между блоком ELSE и } также могут находиться любые блоки

WHILE : цикл while(пока)

Для использования блока WHILE  необходимо ввести в поле CONDITION условие в формате стандартного условия с использованием  знаков >,,==,>=,=,!=. При записи условия также могут быть использованы арифметические операции как с числами, так и с переменными. ВНИМАНИЕ! В данном блоке в условии обязательно должна содержаться переменная. Добавление блока аналогично добавлению блока IF, правила поведения с закрывающей скобкой те же. ВНИМАНИЕ! Для корректной работы программы, а также для избежания нежелательных ошибок внутри блока WHILE обязательно должна изменяться переменная, используемая в условии данного блока WHILE, причем изменяться в сторону уменьшение интервала истинных значений условия в WHILE. Между блоками WHILE и } могут находиться любые блоки .

</string>
    <string name="console">console</string>
    <string name="new_variable">New variable</string>
    <string name="_while">While</string>
    <string name="_if">If</string>
    <string name="if_else">If else</string>
    <string name="print">Print</string>
    <string name="close_bracket">}</string>
    <string name="open_bracket">{</string>
    <string name="_else">Else</string>
    <string name="condition">Condition</string>
    <string name="IF">IF</string>
    <string name="Console">Console</string>
    <string name="output">Output</string>
    <string name="name">Name</string>
    <string name="PRINT">PRINT</string>
    <string name="value">Value</string>
    <string name="var">VAR</string>
    <string name="_WHILE">WHILE</string>
</resources>