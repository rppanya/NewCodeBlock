<resources>
    <string name="app_name">CODEBLOCKS</string>
    <string name="lt_scrollview_xa_android_layout_width_quot_match_parent_quot_xa_android_layout_height_quot_wrap_content_quot_xa_android_fillviewport_quot_true_quot_xa_android_padding_quot_16dp_quot_scary_xa_xa_lt_linearlayout_xa_android_layout_width_quot_match_parent_quot_xa_android_layout_height_quot_wrap_content_quot_xa_android_orientation_quot_vertical_quot_xa_lt_scrollview"><![CDATA[<ScrollView\n android:layout_width=\"match_parent\"\n android:layout_height=\"wrap_content\"\n android:fillViewport=\"true\"\n android:padding=\"16dp\" scary>\n\n <LinearLayout\n android:layout_width=\"match_parent\"\n android:layout_height=\"wrap_content\"\n android:orientation=\"vertical\" />\n </ScrollView>]]></string>
    <string name="hello_blank_fragment">Hello blank fragment</string>
    <string name="rus_instructions"><b>VAR</b> : этот блок позволяет добавлять новые переменные и присваивать им значения, а также изменять значения уже существующих переменных
\n\nДля СОЗДАНИЯ новой переменной необходимо написать в поле NAME название переменной, а в поле VALUE вписать значение переменной. <u>ВНИМАНИЕ!</u> Вы можете вводить в поле VALUE числа, арифметические операции с числами (в том числе скобочные последовательности), другие переменные, созданные ранее, арифметические выражения с существующими переменными.
Для ПЕРЕОПРЕДЕЛЕНИЯ уже существующей переменной необходимо в поле NAME написать название переменной, у которой нужно изменить значение, затем в поле VALUE записать новое значение переменной. <u>ВНИМАНИЕ!</u> Для переопределения вы можете вводить в поле VALUE саму переменную, если ей раньше было присвоено значение.
\n\n<b>PRINT</b> : этот блок позволяет выводить данные в консоль
\n\nС помощью блока PRINT вы можете вывести значение переменной в консоль, вывести значение арифметического выражения в консоль, вывести значение арифметического выражения с использованием переменных в консоль, а также числа. Для вывода нужно ввести в поле OUTPUT то, что необходимо вывести.
\n\n<b>IF</b> : блок условия
\n\nДля использования блока IF необходимо ввести в поле CONDITION условие, в основу которого можно указать какую-то из операций сравнения  и два арифметических выражения, что с чем сравнивается. При записи условия также могут быть использованы арифметические операции как с числами, так и с переменными. <u>ВНИМАНИЕ!</u> При добавлении блока IF в рабочую область добавляется два блока: блок с условием и открывающей скобкой {, а также блок с закрывающей скобкой }. <u>ВНИМАНИЕ!</u> Для корректной работы программы и для избежания ошибок обязательно нахождение блока закрывающей скобки НИЖЕ блока с условием. Между данными блоками, то есть внутри условного оператора могут находиться любые блоки.
\n\n<b>IF ELSE</b> : расширение блока условия, блок иначе
\n\nДля использования блока IF ELSE необходимо ввести в  поле CONDITION условие, в основу которого можно указать какую-то из операций сравнения  и два арифметических выражения, что с чем сравнивается. При записи условия также могут быть использованы арифметические операции как с числами, так и с переменными. <u>ВНИМАНИЕ!</u> При добавлении блока IF ELSE в рабочую область добавляется три блока: блок с условием и открывающей скобкой {, блок с закрывающей скобкой }, else и открывающей скобкой {,  а также блок с закрывающей скобкой }. <u>ВНИМАНИЕ!</u> Для корректной работы программы и для избежания ошибок обязательно размещение данных блоков по уровням в том порядке, в котором они были перечислены здесь и были добавлены в рабочую область. Между блоками IF и ELSE могут находиться любые блоки, между блоком ELSE и } также могут находиться любые блоки.
\n\n<b>WHILE</b> : цикл while (пока)
\n\nДля использования блока WHILE  необходимо ввести в поле CONDITION условие, в основу которого можно указать какую-то из операций сравнения  и два арифметических выражения, что с чем сравнивается. При записи условия также могут быть использованы арифметические операции как с числами, так и с переменными. <u>ВНИМАНИЕ!</u> В данном блоке в условии обязательно должна содержаться переменная. Добавление блока аналогично добавлению блока IF, правила поведения с закрывающей скобкой те же. <u>ВНИМАНИЕ!</u> Для корректной работы программы, а также для избежания нежелательных ошибок внутри блока WHILE обязательно должна изменяться переменная, используемая в условии данного блока WHILE, причем изменяться в сторону уменьшение интервала истинных значений условия в WHILE. Между блоками WHILE и } могут находиться любые блоки.

</string>
    <string name="eng_instructions"><b>VAR</b> : this block allows you to add new variables and assign them values, as well as to change the values of already existing variables
\n\nTo CREATE a new variable, write the name of the variable in the NAME field and enter the value of the variable in the VALUE field. <u>ATTENTION!</u> You can enter numbers into the VALUE field, arithmetic operations with numbers (including bracket sequences), other variables created earlier, arithmetic expressions with existing variables.
To OVERRIDE an already existing variable, write the name of the variable that you want to change the value in the NAME field, and then write the new value of the variable in the VALUE field. <u>ATTENTION!</u> For override, you can enter the variable itself into the VALUE field if it was previously assigned a value.
\n\n<b>PRINT</b> : this block allows you to output data to the console
\n\nWith the PRINT block you can output the value of the variable into the console, output the value of the arithmetic expression in the console, output the value of the arithmetic expression using the variables in the console, as well as numbers. You must enter what you want to print into the OUTPUT field for output.
\n\n<b>IF</b> : condition block
\n\nTo use the IF block, you must enter a condition in the CONDITION field that can be based on one of the comparison operations and two arithmetic expressions that can be compared. The condition can also be written with arithmetic operations on both numbers and variables. <u>ATTENTION!</u> When you add an IF block to the working area, two blocks are added: a block with a condition and an opening bracket {, and a block with a closing bracket }. <u>ATTENTION!</u> For correct operation of the program and to avoid errors, it is necessary to find a block of the closing bracket BELOW block with a condition. Between these blocks, that is, inside the conditional operator can be any blocks.
\n\n<b>IF ELSE</b> : extension block condition, block else
\n\nTo use the IF ELSE block, you need to enter a condition into the CONDITION field that can be based on one of the comparison operations and two arithmetic expressions that can be compared. The condition can also be written with arithmetic operations on both numbers and variables. <u>ATTENTION!</u> When you add an IF ELSE block to the working area, three blocks are added: a condition block and opening bracket {, a block with closing bracket }, else and an opening bracket {,  as well as a block with closing bracket }. <u>ATTENTION!</u> For the correct operation of the program and to avoid errors, it is mandatory to place the blocks in the order in which they were listed here and added to the working area. Any blocks can be located between the IF and ELSE blocks, and any blocks can be located between the ELSE and } blocks.
\n\n<b>WHILE</b> : while cycle
\n\nTo use the WHILE block, you need to enter a condition into the CONDITION field that can be based on one of the comparison operations and two arithmetic expressions that can be compared. The condition can also be written with arithmetic operations on both numbers and variables. <u>ATTENTION!</u> In this block, the condition must contain a variable. Adding a block is similar to adding an IF block, the rules of behavior with the closing bracket are the same. <u>ATTENTION!</u> For correct operation of the program, as well as to avoid undesirable errors within the WHILE block, it is necessary to change the variable used in the condition of the given block WHILE, and to change towards a reduction of the interval of true values of the condition in WHILE. Any blocks can be placed between the WHILE and } blocks.

</string>
    <string name="console">console</string>
    <string name="new_variable">Variable</string>
    <string name="_while">While</string>
    <string name="_if">If</string>
    <string name="if_else">If else</string>
    <string name="print">Print</string>
    <string name="close_bracket">}</string>
    <string name="open_bracket">{</string>
    <string name="_else">Else</string>
    <string name="condition">Condition</string>
    <string name="IF">IF</string>
    <string name="Console">Console</string>
    <string name="output">Output</string>
    <string name="name">Name</string>
    <string name="PRINT">PRINT</string>
    <string name="value">Value</string>
    <string name="var">VAR</string>
    <string name="_WHILE">WHILE</string>
    <string name="exit">Exit</string>
    <string name="instruction">Instruction</string>
    <string name="begin">Begin</string>
</resources>